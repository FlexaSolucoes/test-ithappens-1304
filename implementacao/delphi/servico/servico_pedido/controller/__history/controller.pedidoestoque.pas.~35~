unit controller.pedidoestoque;

interface

uses
     System.SysUtils                     ,
     System.Classes                      ,
     System.Json                         ,
     System.Generics.Collections         ,
     DataSnap.DSProviderDataModuleAdapter,
     Datasnap.DSServer                   ,
     Datasnap.DSAuth                     ,
     REST.JSON                           ,
     Data.DB                             ,
     Model.Conexao.Firedac               ,
     Model.Patterns.Servico              ,
     Model.Patterns.functions            ,
     model.entity.retorno                ,
     model.entity.pedidoestoque          ;

type
  TPedidoEstoqueController = class(TDSServerModule)
  private
    { Private declarations }
  public
    { Public declarations }
    function Pedido(id:Integer=0):TJSONValue;
    function updatePedido(Pedido:TJSONObject):TJSONValue;
    function acceptPedido(Pedido:TJSONObject):TJSONValue;
    function cancelPedido(id:Integer):TJSONValue;
  end;

var
  PedidoEstoqueController: TPedidoEstoqueController;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TPedidoEstoqueController }

function TPedidoEstoqueController.acceptPedido(Pedido: TJSONObject): TJSONValue;
var sSQL:String;
var DS  :TDataSet;
var p:model.entity.pedidoestoque.Tpedidoestoque;
var r:model.entity.retorno.TRetorno;
begin
     p:=TJSon.JsonToObject<model.entity.pedidoestoque.Tpedidoestoque>(pedido);
     r:=model.entity.retorno.TRetorno.Create;
     if Assigned(p) then
     begin
          if IsEmpty(p.tipomovimento_id) then
          begin
               r.retorno_id  := 0;
               r.retorno_cod := 2;
               r.retorno_msg := 'Por favor informar o tipo de movimento!';
          end
          else if IsEmpty(p.filial_id) then
          begin
               r.retorno_id  := 0;
               r.retorno_cod := 3;
               r.retorno_msg := 'Por favor informar a filial!';
          end
          else if IsEmpty(p.cliente_id) then
          begin
               r.retorno_id  := 0;
               r.retorno_cod := 2;
               r.retorno_msg := 'Por favor informar o cliente!';
          end
          else
          begin
               sSQL:= 'insert into pedidoestoque    ( ';
               sSQL:= sSQL+ ' tipomovimento_id      , ';
               sSQL:= sSQL+ ' filial_id             , ';
               sSQL:= sSQL+ ' cliente_id            , ';
               sSQL:= sSQL+ ' pedido_data           , ';
               sSQL:= sSQL+ ' pedido_valoritens     , ';
               sSQL:= sSQL+ ' pedido_valordesconto  , ';
               sSQL:= sSQL+ ' pedido_valortotal     , ';
               sSQL:= sSQL+ ' pedido_status         ) ';
               sSQL:= sSQL+ ' VALUES (                ';
               sSQL:= sSQL+ ' '   + p.tipomovimento_id.ToString +    ' , ';
               sSQL:= sSQL+ ' '   + p.filial_id       .ToString +    ' , ';
               sSQL:= sSQL+ ' '   + p.cliente_id      .ToString +    ' , ';
               sSQL:= sSQL+ ' ''' + p.pedido_data               + ''' , ';
               sSQL:= sSQL+ ' 0 , ';
               sSQL:= sSQL+ ' 0 , ';
               sSQL:= sSQL+ ' 0 , ';
               sSQL:= sSQL+ ' 0 ) ';
               sSQL:= sSQL+ ' select @@IDENTITY pedido_id ';

               DS:=TModelConexaoFiredac.GetInstance.ExecuteSelect(sSQL);
               if DS.RecordCount>0 then
               begin
                    if DS.Fields[0].FieldName = 'pedido_id' then
                    begin
                         p.pedido_ID:= DS.Fields[0].AsInteger;
                    end;
                    r.retorno_id  := p.pedido_ID;
                    r.retorno_cod := 1;
                    r.retorno_msg := 'Registro inserido com sucesso!';
               end
               else
               begin
                    r.retorno_id  := 0;
                    r.retorno_cod := 999;
                    r.retorno_msg := 'Falha na inserção do registro!';
               end;
          end;
     end
     else
     begin
          r.retorno_id  := 0;
          r.retorno_cod := 999999;
          r.retorno_msg := 'Falha no objeto!';
     end;

     Result:=TJson.ObjectToJsonObject(r);
end;

function TPedidoEstoqueController.cancelPedido(id: Integer): TJSONValue;
var sSQL:String;
var r:model.entity.retorno.TRetorno;
begin
     r:=model.entity.retorno.TRetorno.Create;
     if IsNotEmpty(id) then
     begin
          sSQL:= 'update pedidoestoque set    ';
          sSQL:= sSQL+ ' pedido_status     = 1';
          sSQL:= sSQL+ ' where pedido_id   = 0' +id.ToString ;
          sSQL:= sSQL+ ' and pedido_status = 0';

          if TModelConexaoFiredac.GetInstance.ExecuteCommand(sSQL) then
          begin
               r.retorno_id  := 0;
               r.retorno_cod := 1;
               r.retorno_msg := 'Pedido cancelado com sucesso!';
               Result:=TJSONString.Create('Pedido cancelado com sucesso!');
          end
          else
          begin
               r.retorno_id  := 0;
               r.retorno_cod := 999;
               r.retorno_msg := 'Falha no canelamento do pedido!';
          end;
     end
     else
     begin
          r.retorno_id  := 0;
          r.retorno_cod := 2;
          r.retorno_msg := 'Por favor informe pedido a ser canelado!';
     end;
     Result:=TJson.ObjectToJsonObject(r);
end;

function TPedidoEstoqueController.Pedido(id: Integer): TJSONValue;
var sSQL:String;
begin
     sSQL:=      'Select * from pedidoestoque ';
     if IsNotEmpty(id) then
     begin
          sSQL := sSQL+'where pedido_id = '+id.ToString;
     end
     else
     begin
          sSQL := sSQL+'where pedido_status in (0) ';
     end;
     sSQL  := sSQL+' order by pedido_id ';
     Result:= TModelPatternsServico.GetInstance.DataSetToJsonArray(TModelConexaoFiredac.GetInstance.ExecuteSelect(sSQL));
end;

function TPedidoEstoqueController.updatePedido(Pedido: TJSONObject): TJSONValue;
var sSQL:String;
var p:model.entity.pedidoestoque.Tpedidoestoque;
begin
     p:=TJSon.JsonToObject<model.entity.pedidoestoque.Tpedidoestoque>(pedido);
     sSQL:= 'update pedidoestoque set            ';
     sSQL:= sSQL+ ' cliente_id           = '   + p.cliente_id      .ToString  +   ' , ';
     sSQL:= sSQL+ ' pedido_data          = ''' + p.pedido_data                + ''' , ';
     sSQL:= sSQL+ ' pedido_valoritens    = '   + Funx(p.pedido_valoritens   ) +   ' , ';
     sSQL:= sSQL+ ' pedido_valordesconto = '   + Funx(p.pedido_valordesconto) +   ' , ';
     sSQL:= sSQL+ ' pedido_valortotal    = '   + Funx(p.pedido_valortotal   ) +   ' , ';
     sSQL:= sSQL+ ' pedido_status        = '   + p.pedido_status   .ToString  +   '   ';
     sSQL:= sSQL+ ' where pedido_ID         = ' +p.pedido_ID.ToString ;
     sSQL:= sSQL+ ' and   tipomovimento_id  = ' + p.tipomovimento_id.ToString  +   ' ';
     sSQL:= sSQL+ ' and   filial_id         = ' + p.filial_id       .ToString  +   ' ';

     if TModelConexaoFiredac.GetInstance.ExecuteCommand(sSQL) then
     begin
          Result:=TJSONString.Create('Registro inserido com sucesso!');
     end
     else
     begin
          Result:=TJSONString.Create('Falha na inserção do registro!');
     end;
end;

end.
